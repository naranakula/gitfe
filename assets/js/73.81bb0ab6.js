(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{358:function(e,t,n){"use strict";n.r(t);var s=n(40),a=Object(s.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"css"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#css","aria-hidden":"true"}},[e._v("#")]),e._v(" CSS")]),e._v(" "),n("h3",{attrs:{id:"支持内嵌的css"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#支持内嵌的css","aria-hidden":"true"}},[e._v("#")]),e._v(" 支持内嵌的CSS")]),e._v(" "),n("p",[e._v('我们绑定 styled-jsx 来生成独立作用域的 CSS. 目标是支持类似于web组件的 "shadow CSS", 但是 不支持独立模块作用域的 JS.')]),e._v(" "),n("p",[e._v("举个栗子🌰:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("export default () =>\n<div>\n  Hello world\n  <p>scoped!</p>\n  # 作用域为<style jsx>以前的标签\n  <style jsx>{`\n    p {\n      color: blue;\n    }\n    div {\n      background: red;\n    }\n    @media (max-width: 600px) {\n      div {\n        background: blue;\n      }\n    }\n  `}</style>\n  <h2>green</h2>\n  <style jsx>{`\n    h2 {\n      color: green;\n    }    \n  `}\n  </style>\n</div>\n")])])]),n("h4",{attrs:{id:"内嵌样式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内嵌样式","aria-hidden":"true"}},[e._v("#")]),e._v(" 内嵌样式")]),e._v(" "),n("p",[e._v("使用CSS 内嵌 JS 写法")]),e._v(" "),n("p",[e._v("举个栗子🌰:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  export default () => <p style={{ color: 'red' }}>hi there</p>\n")])])]),n("p",[e._v("Examples\n- "),n("a",{attrs:{href:"https://github.com/zeit/next.js/tree/7.0.0-canary.8/examples/with-styled-components",target:"_blank",rel:"noopener noreferrer"}},[e._v("Styled components"),n("OutboundLink")],1),e._v("\n- "),n("a",{attrs:{href:"https://github.com/zeit/next.js/tree/7.0.0-canary.8/examples/with-styletron",target:"_blank",rel:"noopener noreferrer"}},[e._v("Styletron"),n("OutboundLink")],1),e._v("\n- "),n("a",{attrs:{href:"https://github.com/zeit/next.js/tree/7.0.0-canary.8/examples/with-glamor",target:"_blank",rel:"noopener noreferrer"}},[e._v("Glamor"),n("OutboundLink")],1),e._v("\n- "),n("a",{attrs:{href:"https://github.com/zeit/next.js/tree/7.0.0-canary.8/examples/with-glamorous",target:"_blank",rel:"noopener noreferrer"}},[e._v("Glamorous"),n("OutboundLink")],1),e._v("\n- "),n("a",{attrs:{href:"https://github.com/zeit/next.js/tree/7.0.0-canary.8/examples/with-cxs",target:"_blank",rel:"noopener noreferrer"}},[e._v("Cxs"),n("OutboundLink")],1),e._v("\n- "),n("a",{attrs:{href:"https://github.com/zeit/next.js/tree/7.0.0-canary.8/examples/with-aphrodite",target:"_blank",rel:"noopener noreferrer"}},[e._v("Aphrodite"),n("OutboundLink")],1),e._v("\n- "),n("a",{attrs:{href:"https://github.com/zeit/next.js/tree/7.0.0-canary.8/examples/with-fela",target:"_blank",rel:"noopener noreferrer"}},[e._v("Fela"),n("OutboundLink")],1)]),e._v(" "),n("pre",[n("code",[e._v("服务端渲染的时样式更改,可以通过包裹自定义 Document，来添加样式\neg: \n[Styled components custom document](https://github.com/zeit/next.js/tree/7.0.0-canary.8/examples/with-styled-components)\n")])]),e._v(" "),n("h3",{attrs:{id:"使用-css-sass-less-stylus-files"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用-css-sass-less-stylus-files","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用 CSS / Sass / Less / Stylus files")]),e._v(" "),n("pre",[n("code",[e._v("支持用.css, .scss, .less or .styl，需要配置默认文件 next.config.js\n\n举个栗子🌰: \n\n```\n  # 安装\n  npm install --save @zeit/next-css\n  # or\n  yarn add @zeit/next-css\n```\n\n在项目的根目录（在pages /和package.json旁边）中创建一个next.config.js文件\n\n```\n# next.config.js\nconst withCSS = require('@zeit/next-css')\nmodule.exports = withCSS({\n  # 设置css模块\n  cssModules: true\n})\n```\n\n引入页面,创建一个css文件 index.css\n```\n.example {\n  font-size: 50px;\n}\n```\n在pages/index.js中引入css文件\n```\nimport css from \"../index.css\"\n\nexport default () => <div className={css.example}>Hello World!</div>\n```\n\n您还可以通过传递一个名为cssLoaderOptions的对象，将选项列表传递给css-loader。例如，要启用局部作用域的CSS模块，可以这样写:\n```\n  # next.config.js\n  const withCSS = require('@zeit/next-css')\n  module.exports = withCSS({\n    cssModules: true,\n    cssLoaderOptions: {\n      importLoaders: 1,\n      localIdentName: \"[local]___[hash:base64:5]\",\n    }\n  })\n```\n")])]),e._v(" "),n("h2",{attrs:{id:"静态资源文件服务（如图像）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#静态资源文件服务（如图像）","aria-hidden":"true"}},[e._v("#")]),e._v(" 静态资源文件服务（如图像）")]),e._v(" "),n("p",[e._v("在根目录下新建文件夹叫static。代码可以通过/static/来引入相关的静态资源。\nor\n在根目录下新建文件夹叫public。代码可以直接引入相关的静态资源。")]),e._v(" "),n("p",[e._v("引入方法：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('  # /static/my-image.png\n  export default () => <img src="/static/my-image.png" alt="my image" />\n  # /public/my-image.png\n  export default () => <img src="/my-image.png" alt="my image" />\n')])])])])},[],!1,null,null,null);t.default=a.exports}}]);